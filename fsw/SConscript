import os
import subprocess


def build_common(env):
    env["CPPPATH"] += ["include/"]
    return [
        env.Library("main-app", ["fakewire/rmap.c", "main/cmd.c", "main/comm.c", "main/debug.c", "main/heartbeat.c",
                                 "main/magnetometer.c", "main/radio.c", "main/spacecraft.c", "main/tlm.c"]),
        env.Library("fakewire", ["fakewire/codec.c", "fakewire/exchange.c", "main/chart.c"])
    ]


# ============================= Linux =============================

def configure_linux():
    linux_env = Environment(CCFLAGS=['-ggdb', '-Wall', '-Wextra', '-Werror', '-D_GNU_SOURCE', '-std=gnu11',
                                     '-Dstatic_assert=_Static_assert'],
                            LIBS=['pthread', 'z'],
                            PREFIX=GetOption('prefix'),
                            CPPPATH=[])

    assert linux_env["CPPPATH"] == [], "cpppath: %r" % linux_env["CPPPATH"]

    for inherit in ["AR", "AS", "LD", "NM", "CC", "CPP", "CXX", "RANLIB", "READELF", "STRIP", "OBJCOPY", "OBJDUMP"]:
        if inherit in os.environ:
            linux_env[inherit] = os.environ[inherit]

    common_libs = build_common(linux_env)

    linux_env["CPPPATH"] += ["linux/include/"]

    LINUX_SRC = ["linux/fakewire_link.c", "linux/platform.c", "linux/queue.c", "linux/semaphore.c", "linux/stream.c"]
    linux_app = linux_env.Program("app", LINUX_SRC + ["linux/clock.c"] + common_libs)
    linux_env.Default(linux_app)

    linux_env.Program("fakewire_exc_test",
                      LINUX_SRC + ["fakewire/test/fakewire_exc_test.c", "fakewire/test/test_common.c"] + common_libs)

    linux_env.Alias("install",
                    [linux_env.Install('$PREFIX/usr/bin', linux_app),
                     linux_env.Install('$PREFIX/etc/init.d', "linux/S80app")])


# ============================= FreeRTOS =============================

def configure_freertos():
    COMMON_RTOS_FLAGS = ['-ggdb', '-mcpu=cortex-a15', '-mfpu=vfpv4', '-mfloat-abi=softfp']

    rtos_env = Environment(
        CC="arm-none-eabi-gcc",
        AS="arm-none-eabi-as",
        LINK="arm-none-eabi-ld",
        OBJCOPY="arm-none-eabi-objcopy",
        STRIP="arm-none-eabi-strip",
        LINKFLAGS=["-T", "$LINKSCRIPT", "--fatal-warnings"],
        CCFLAGS=COMMON_RTOS_FLAGS + ["-Wall", "-Wextra", "-Werror",
                                     # because ealibc uses #pragma mark, and that causes trouble
                                     "-Wno-unknown-pragmas",
                                     "-nostdlib", "-nostdinc", "-nostartfiles", "-ffreestanding",
                                     "-std=gnu11",
                                     "-D_BITSIZE=32", "-D__FREERTOS__"],
        ASFLAGS=COMMON_RTOS_FLAGS + ["--fatal-warnings"],
        CPPPATH=[],
    )
    # TODO: is this actually necessary?
    rtos_env["ASPPCOM"] = rtos_env["ASPPCOM"].replace("$CC", "$AS")
    LIBGCC_LIBRARY_PATH = subprocess.check_output([rtos_env['CC'], "-print-libgcc-file-name"]).decode().strip()

    # TODO: ensure that ASFLAGS is actually used
    ROOT_DIR = "../../.."
    # embedded artistry's libc
    EALIBC_ROOT = os.path.join(ROOT_DIR, "ealibc")
    EALIBC_INC = os.path.join(EALIBC_ROOT, "include")

    ZLIB_ROOT = os.path.join(ROOT_DIR, "zlib-1.2.11")

    FREERTOS_ROOT = os.path.join(ROOT_DIR, "FreeRTOS-Kernel")
    FREERTOS_INC = os.path.join(FREERTOS_ROOT, "include")

    common_libs = build_common(rtos_env)
    elf_lib = rtos_env.Library("elf", ["elf/elf.c"])

    rtos_env["CPPPATH"] += [
        "freertos/include/", "bootrom/include/",
        FREERTOS_INC,
        EALIBC_INC, EALIBC_ROOT + "/printf", EALIBC_ROOT + "/arch/arm/include", ZLIB_ROOT
    ]

    ealibc = rtos_env.Library(
        "ealibc",
        [os.path.join(EALIBC_ROOT, "printf/printf.c")] +
        [os.path.join(EALIBC_ROOT, "src", x) for x in
         ["assert/assert.c", "string/memset.c", "string/memcpy.c", "string/memmove.c", "crt/exit.c", "stdlib/rand.c"]]
    )

    RTOS_SRC = ["freertos/clock.c", "freertos/crash.c", "freertos/entrypoint.s", "freertos/fakewire_link.c",
                "freertos/gic.c", "freertos/scrubber.c", "freertos/stubs.c", "freertos/timer.c", "freertos/thread.c",
                "freertos/virtio.c", "freertos/watchdog.c", "freertos/port.c"]
    EXTERNAL_SRC = [
        LIBGCC_LIBRARY_PATH,
        os.path.join(ZLIB_ROOT, "crc32.c"),
        ealibc,
        elf_lib,
    ]
    EXTERNAL_SRC += [os.path.join(FREERTOS_ROOT, x) for x in
                     ["tasks.c", "queue.c", "list.c", "stream_buffer.c", "portable/MemMang/heap_4.c"]]

    rtos_kernel = rtos_env.Program("kernel", RTOS_SRC + common_libs + EXTERNAL_SRC, LINKSCRIPT="freertos/link.ld")
    rtos_env.Depends(rtos_kernel, "freertos/link.ld")
    rtos_env.Default(rtos_kernel)

    stripped_kernel = rtos_env.Command(
        target='stripped-kernel',
        source=rtos_kernel,
        action='$STRIP --strip-all $SOURCE -o $TARGET',
    )

    embedding = rtos_env.Command(
        target='embedded-kernel.o',
        source=stripped_kernel,
        action='$OBJCOPY -I binary -O elf32-littlearm -B arm --strip-all $SOURCE $TARGET',
    )

    BOOTROM_SRC = ["bootrom/boot.c", "bootrom/start.s", ealibc, LIBGCC_LIBRARY_PATH, embedding, elf_lib]
    rtos_bootrom_elf = rtos_env.Program("bootrom-elf", BOOTROM_SRC, LINKSCRIPT="bootrom/link.ld")
    rtos_env.Depends(rtos_bootrom_elf, "bootrom/link.ld")

    rtos_bootrom_bin = rtos_env.Command(
        target='bootrom-bin',
        source=rtos_bootrom_elf,
        action='$OBJCOPY -I elf32-littlearm -O binary $SOURCE $TARGET',
    )
    rtos_env.Default(rtos_bootrom_bin)


# ============================= Main =============================

Import("platform")
if platform == "linux":
    configure_linux()
elif platform == "freertos":
    configure_freertos()
else:
    raise RuntimeError("no such platform: %r", platform)
