import SCons.Defaults
import SCons.Tool
import os
import subprocess


def build_common(env):
    env["CPPPATH"] += ["include/"]
    fakewire = env.Library("fakewire", ["fakewire/codec.c", "fakewire/exchange.c", "main/chart.c"])
    return [
        env.Library("main-app", ["fakewire/rmap.c", "fakewire/rmap_helpers.c", "main/command.c", "main/comm.c",
                                 "main/heartbeat.c", "main/magnetometer.c", "main/multichart.c", "main/radio.c",
                                 "main/spacecraft.c", "fakewire/switch.c", "main/telemetry.c"]),
        fakewire,
    ], fakewire


# ============================= Linux =============================

def configure_linux():
    linux_env = Environment(CCFLAGS=['-ggdb', '-Wall', '-Wextra', '-Werror', '-D_GNU_SOURCE', '-std=gnu11',
                                     '-Dstatic_assert=_Static_assert'],
                            LIBS=['pthread', 'z'],
                            PREFIX=GetOption('prefix'),
                            CPPPATH=[])

    assert linux_env["CPPPATH"] == [], "cpppath: %r" % linux_env["CPPPATH"]

    for inherit in ["AR", "AS", "LD", "NM", "CC", "CPP", "CXX", "RANLIB", "READELF", "STRIP", "OBJCOPY", "OBJDUMP"]:
        if inherit in os.environ:
            linux_env[inherit] = os.environ[inherit]

    common_libs, just_fakewire = build_common(linux_env)

    linux_env["CPPPATH"] += ["linux/include/"]

    LINUX_SRC = ["linux/debug.c", "linux/fakewire_link.c", "linux/platform.c", "linux/semaphore.c", "linux/stream.c"]
    linux_app = linux_env.Program("app", LINUX_SRC + ["linux/clock.c", "linux/entrypoint.c"] + common_libs)
    linux_env.Default(linux_app)

    linux_test = linux_env.Program("fakewire_exc_test", LINUX_SRC +
                                   ["fakewire/test/fakewire_exc_test.c", "fakewire/test/test_common.c", just_fakewire])
    linux_env.Default(linux_test)

    linux_env.Alias("install",
                    [linux_env.Install('$PREFIX/usr/bin', linux_app),
                     linux_env.Install('$PREFIX/etc/init.d', "linux/S80app")])


# ============================= FreeRTOS =============================
def configure_freertos():
    ROOT_DIR = os.path.abspath("../../..")

    COMMON_FLAGS = [
        "-ggdb",
        "-mcpu=cortex-a15", "-mfpu=vfpv4", "-mfloat-abi=softfp",
    ]

    rtos_env = Environment(
        CC="arm-none-eabi-gcc",
        AS="arm-none-eabi-gcc",
        LINK="arm-none-eabi-ld",
        OBJCOPY="arm-none-eabi-objcopy",
        STRIP="arm-none-eabi-strip",
        LINKFLAGS=["-T", "$LINKSCRIPT", "--fatal-warnings"],
        CCFLAGS=COMMON_FLAGS + ["-Wall", "-Wextra", "-Werror",
                                # because ealibc uses #pragma mark, and that causes trouble
                                "-Wno-unknown-pragmas",
                                "-nostdlib", "-nostdinc", "-ffreestanding",
                                "-std=gnu11",
                                "-D_BITSIZE=32", "-D__FREERTOS__"],
        ASFLAGS=COMMON_FLAGS + ["-c", "-Wa,--fatal-warnings"],
        CPPPATH=[],
        PPSUFFIX=".iraw",
        RWSUFFIX=".i",
        PPCOM='$CC -o $TARGET -E $CFLAGS $CCFLAGS -D__PYTHON_PREPROCESS__ $_CCCOMCOM $SOURCES',
        PYTHONPP='toolchain/preprocessor.py',
        PPMODCOM='python3 $PYTHONPP $SOURCES $TARGET',
        # eliminate $_CCCOMCOM here because it's used for preprocessor flags that are not needed here
        OBJCOM='$CC -o $TARGET -c $CFLAGS $CCFLAGS $SOURCES',
    )

    rtos_env['BUILDERS']['PP'] = Builder(action=Action("$PPCOM", "$PPCOMSTR"),
                                         suffix='$PPSUFFIX',
                                         src_suffix='.c',
                                         source_scanner=SourceFileScanner,
                                         single_source=1)

    def plugin_dep_emitter(target, source, env):
        env.Depends(target, "$PYTHONPP")
        return target, source

    rtos_env['BUILDERS']['PPMOD'] = Builder(action=Action("$PPMODCOM", "$PPMODCOMSTR"),
                                            emitter=plugin_dep_emitter,
                                            suffix='$RWSUFFIX',
                                            src_suffix='$PPSUFFIX',
                                            src_builder='PP',
                                            single_source=1)
    ObjAction = Action("$OBJCOM", "$OBJCOMSTR")
    ASAction = Action("$ASCOM", "$ASCOMSTR")
    CAction = Action("$CCCOM", "$CCCOMSTR")
    static_object_builder = Builder(action={'$RWSUFFIX': ObjAction, '.s': ASAction, '.S': CAction},
                                    emitter=SCons.Defaults.StaticObjectEmitter,
                                    prefix='$OBJPREFIX',
                                    suffix='$OBJSUFFIX',
                                    src_suffix=['$RWSUFFIX', '.s', '.S'],
                                    src_builder='PPMOD',
                                    single_source=1)
    rtos_env['BUILDERS']['Object'] = static_object_builder
    rtos_env['BUILDERS']['StaticObject'] = static_object_builder

    COMPILER_LIBRARY_PATH = subprocess.check_output([rtos_env['CC'], "-print-libgcc-file-name"]).decode().strip()

    # embedded artistry's libc
    EALIBC_ROOT = os.path.join(ROOT_DIR, "ealibc")
    EALIBC_INC = os.path.join(EALIBC_ROOT, "include")

    ZLIB_ROOT = os.path.join(ROOT_DIR, "zlib-1.2.11")

    FREERTOS_ROOT = os.path.join(ROOT_DIR, "FreeRTOS-Kernel")
    FREERTOS_INC = os.path.join(FREERTOS_ROOT, "include")

    common_libs, _ = build_common(rtos_env)
    elf_lib = rtos_env.Library("elf", ["elf/elf.c", "freertos/debug.c"])

    rtos_env["CPPPATH"] += [
        "freertos/include/", "bootrom/include/",
        FREERTOS_INC,
        EALIBC_INC, EALIBC_ROOT + "/arch/arm/include", ZLIB_ROOT
    ]

    ealibc = rtos_env.Library(
        "ealibc",
        [os.path.join(EALIBC_ROOT, "src", x) for x in
         ["string/memset.c", "string/memcpy.c", "string/memmove.c", "string/strlen.c", "crt/exit.c", "stdlib/rand.c"]]
    )

    RTOS_SRC = ["freertos/clock.c", "freertos/crash.c", "freertos/entrypoint.s", "freertos/fakewire_link.c",
                "freertos/gic.c", "freertos/scrubber_api.c", "freertos/stubs.c", "freertos/timer.c",
                "freertos/rtos_port.c", "freertos/rtos_tasks.c", "freertos/thread.c", "freertos/virtio.c",
                "freertos/virtio_console.c", "freertos/watchdog.c"]
    EXTERNAL_SRC = [
        COMPILER_LIBRARY_PATH,
        os.path.join(ZLIB_ROOT, "crc32.c"),
        ealibc,
        elf_lib,
    ]
    EXTERNAL_SRC += [os.path.join(FREERTOS_ROOT, x) for x in
                     ["queue.c", "list.c", "stream_buffer.c", "portable/MemMang/heap_4.c"]]

    prog_scrubber = rtos_env.Program("scrubber", ["freertos/scrubber_task.c", elf_lib, COMPILER_LIBRARY_PATH],
                                     LINKFLAGS=rtos_env["LINKFLAGS"] + ["--relocatable"], LINKSCRIPT="freertos/prog.ld")
    rtos_env.Depends(prog_scrubber, "freertos/prog.ld")

    scrubber_replicas = [
        rtos_env.Command(
            target='scrubber-copy-%d' % replica,
            source=prog_scrubber,
            action='$OBJCOPY --keep-global-symbol=scrubber_data_%d '
                   '--redefine-sym scrubber_data_local=scrubber_data_%d $SOURCE $TARGET' % (replica, replica),
        ) for replica in [1, 2]
    ]

    rtos_kernel = rtos_env.Program("kernel", RTOS_SRC + common_libs + EXTERNAL_SRC + scrubber_replicas, LINKSCRIPT="freertos/link.ld")
    rtos_env.Depends(rtos_kernel, "freertos/link.ld")
    rtos_env.Default(rtos_kernel)

    stripped_kernel = rtos_env.Command(
        target='stripped-kernel',
        source=rtos_kernel,
        action='$STRIP --strip-all --remove-section=.debugf_messages $SOURCE -o $TARGET',
    )

    embedding = rtos_env.Command(
        target='embedded-kernel.o',
        source=stripped_kernel,
        action='$OBJCOPY -I binary -O elf32-littlearm -B arm --strip-all $SOURCE $TARGET',
    )

    BOOTROM_SRC = ["bootrom/boot.c", "bootrom/start.s", ealibc, COMPILER_LIBRARY_PATH, embedding, elf_lib]
    rtos_bootrom_elf = rtos_env.Program("bootrom-elf", BOOTROM_SRC, LINKSCRIPT="bootrom/link.ld")
    rtos_env.Depends(rtos_bootrom_elf, "bootrom/link.ld")

    rtos_bootrom_bin = rtos_env.Command(
        target='bootrom-bin',
        source=rtos_bootrom_elf,
        action='$OBJCOPY -I elf32-littlearm -O binary $SOURCE $TARGET',
    )
    rtos_env.Default(rtos_bootrom_bin)


# ============================= Main =============================

Import("platform")
if platform == "linux":
    configure_linux()
elif platform == "freertos":
    configure_freertos()
else:
    raise RuntimeError("no such platform: %r", platform)
