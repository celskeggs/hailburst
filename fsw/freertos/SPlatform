Import('build_modules')

app_modules = [
    # configuration must go first
    'toolchain',

    # code modules can come afterwards
    'bus',
    'elf',
    'flight',
    'freertos',
    'freertos/debug',
    'freertos/ealibc',
    'freertos/libgcc',
    'freertos/zlib',
    'include',
    'synch',
]

bootrom_modules = [
    # configuration must go first
    'toolchain',

    # code modules can come afterwards
    'bootrom',
    'elf',
    'freertos/debug',
    'freertos/ealibc',
    'freertos/libgcc',
    'include',
]

common_flags = [
    "-ggdb",
    "-mcpu=cortex-a15", "-mfpu=vfpv4", "-mfloat-abi=softfp",
]

env = Environment(
    CC="arm-none-eabi-gcc",
    AS="arm-none-eabi-gcc",
    LINK="arm-none-eabi-ld",
    OBJCOPY="arm-none-eabi-objcopy",
    STRIP="arm-none-eabi-strip",
    LINKFLAGS=["-T", "$LINKSCRIPT", "--fatal-warnings"],
    CCFLAGS=common_flags + [
        "-fdiagnostics-color", "-fmax-errors=1",
        "-Wall", "-Wextra", "-Werror",
        # because ealibc uses #pragma mark, and that causes trouble
        "-Wno-unknown-pragmas",
        # because comparisons of constants defined using 'enum' otherwise might cause trouble
        "-Wno-enum-compare",
        "-nostdlib", "-nostdinc", "-ffreestanding",
        "-std=gnu11",
        "-D_BITSIZE=32", "-D__FREERTOS__",
    ],
    ASFLAGS=common_flags + [
        "-c",
        "-Wa,--fatal-warnings",
    ],
    CPPPATH=[],
    PLATFORM="VIVID",
)


rtos_kernel = env.Program("kernel", build_modules(env, app_modules),
                          LINK="$REPLICA_LINK", LINKSCRIPT="$FREERTOS_LINKSCRIPT")
env.Depends(rtos_kernel, "$REPLICA_LINK_PY")
env.Depends(rtos_kernel, "$EXCISE")
env.Depends(rtos_kernel, "$FREERTOS_LINKSCRIPT")
env.Depends(rtos_kernel, "$REPLICA_SCRIPT")
env.Default(rtos_kernel)

stripped_kernel = env.Command(
    target='stripped-kernel',
    source=rtos_kernel,
    action=Action('$STRIP --strip-all --remove-section=debugf_messages $SOURCE -o $TARGET', cmdstr="$STRIPCOMSTR"),
)

embedding = env.Command(
    target='embedded-kernel.o',
    source=stripped_kernel,
    action=Action('$OBJCOPY -I binary -O elf32-littlearm -B arm --strip-all $SOURCE $TARGET', cmdstr="$BIN2OBJCOMSTR"),
)

rtos_bootrom_elf = env.Program("bootrom-elf", build_modules(env, bootrom_modules) + [embedding],
                               LINKSCRIPT="$BOOTROM_LINKSCRIPT")
env.Depends(rtos_bootrom_elf, "$BOOTROM_LINKSCRIPT")

rtos_bootrom_bin = env.Command(
    target='bootrom-bin',
    source=rtos_bootrom_elf,
    action=Action('$OBJCOPY -I elf32-littlearm -O binary $SOURCE $TARGET', cmdstr="$OBJ2BINCOMSTR"),
)
env.Default(rtos_bootrom_bin)
